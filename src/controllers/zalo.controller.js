// src/controllers/zalo.controller.js
import { handleAIReply } from "../services/aiResponder.js";
import { replyZalo } from "../services/zaloService.js";
import { refreshOAToken, getOAToken, fetchConfigFromAirtable, updateLastInteractionOnlyIfNewDay} from "../config/index.js"; // N·∫øu b·∫°n c√≥ g√≥i logic refresh token v√†o config ho·∫∑c service ri√™ng
import { saveMessage, getRecentMessages } from "../services/airtableService.js";
// C√°c h√†m l∆∞u l·ªãch s·ª≠, c·∫≠p nh·∫≠t Airtable, ‚Ä¶ c√≥ th·ªÉ ƒë∆∞·ª£c chuy·ªÉn v√†o m·ªôt module ri√™ng (v√≠ d·ª• airtableService)

export async function verifyWebhook(req, res) {
  // ƒê∆°n gi·∫£n tr·∫£ v·ªÅ echostr n·∫øu c√≥ logic x√°c th·ª±c cho GET webhook
  const { hub: { challenge } } = req.query;
  return res.status(200).send(challenge || "Webhook verified");
}

export async function handleZaloWebhook(req, res, next) {
  try {
    const { event_name, sender, message } = req.body;
    const userId = sender.id;
    const userMessage = message.text;
    // Gi·∫£ s·ª≠ b·∫°n c√≥ h√†m fetchConfigFromAirtable ƒë·ªÉ l·∫•y SYSTEM_PROMPT v√† c√°c c·∫•u h√¨nh kh√°c
    const config = await fetchConfigFromAirtable();

    // Ki·ªÉm tra tr·∫°ng th√°i bot
    if (config.bot_status !== "active") {
      console.log("üö´ Bot ƒëang t·∫Øt, kh√¥ng x·ª≠ l√Ω ph·∫£n h·ªìi.");
      return res.sendStatus(200);
    }

    const SYSTEM_PROMPT = config.SYSTEM_PROMPT;
    const token = getOAToken(); // Token ƒë√£ ƒë∆∞·ª£c refresh theo cron
    const platform = "zalo";

    // L∆∞u l·ªãch s·ª≠ tin nh·∫Øn, c·∫≠p nh·∫≠t interaction n·∫øu c·∫ßn (b·∫°n c√≥ th·ªÉ t√°ch ri√™ng sang airtableService)
    await saveMessage({ userId, role: "user", message: userMessage, platform });
    await updateLastInteractionOnlyIfNewDay(userId, event_name, platform);
    
    const history = await getRecentMessages(userId, platform);
    if (event_name === "user_send_text") {
      console.log(`B·∫°n v·ª´a g·ª≠i: "${userMessage}"`);
      const aiReply = await handleAIReply(userId, userMessage, SYSTEM_PROMPT, history, token, platform);
      await saveMessage({ userId, role: "assistant", message: aiReply, platform });
    } else {
      // X·ª≠ l√Ω c√°c lo·∫°i n·ªôi dung kh√°c:
      const unsupportedTypes = [
        "user_send_image",
        "user_send_video",
        "user_send_audio",
        "user_send_file",
        "user_send_sticker",
        "user_send_location",
        "user_send_business_card"
      ];
      if (unsupportedTypes.includes(event_name)) {
        await replyZalo(userId, `‚ùó Tr·ª£ l√Ω AI hi·ªán t·∫°i ch∆∞a h·ªó tr·ª£ x·ª≠ l√Ω lo·∫°i n·ªôi dung n√†y.\n\nüìå Vui l√≤ng g·ª≠i tin nh·∫Øn vƒÉn b·∫£n ƒë·ªÉ ƒë∆∞·ª£c ph·∫£n h·ªìi ch√≠nh x√°c nh√©.`, token);
      } else {
        await replyZalo(userId, `Ch√†o b·∫°n, r·∫•t vui ƒë∆∞·ª£c k·∫øt n·ªëi! M√¨nh c√≥ th·ªÉ h·ªó tr·ª£ g√¨ cho k·∫ø ho·∫°ch √°p d·ª•ng AI v√† Automation cho b·∫°n kh√¥ng?`, token);
        console.log("‚ùì Lo·∫°i event ch∆∞a x·ª≠ l√Ω:", event_name);
      }
    }

    console.log("‚úÖ Webhook nh·∫≠n ƒë∆∞·ª£c:", event_name, req.body);
    res.sendStatus(200);
  } catch (err) {
    console.error("üî• L·ªói webhook:", err);
    next(err);
  }
}
