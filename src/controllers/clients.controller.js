// src/controllers/zalo.controller.js
// import { handleIGMessage, handleIGPostback } from "../services/instagramService.js";
// import { handleAIReply } from "../services/aiResponder.js";
// import { replyMessenger  } from "../services/zaloService.js";
// import { replyToComment  } from "../services/facebookService.js";
// import { fetchConfigFromAirtable, updateLastInteractionOnlyIfNewDay } from "../config/index.js"; // N·∫øu b·∫°n c√≥ g√≥i logic refresh token v√†o config ho·∫∑c service ri√™ng
// import { saveMessage, getRecentMessages } from "../services/airtableService.js";
// C√°c h√†m l∆∞u l·ªãch s·ª≠, c·∫≠p nh·∫≠t Airtable, ‚Ä¶ c√≥ th·ªÉ ƒë∆∞·ª£c chuy·ªÉn v√†o m·ªôt module ri√™ng (v√≠ d·ª• airtableService)

// export async function verifyWebhookIG(req, res) {
//   // // ƒê∆°n gi·∫£n tr·∫£ v·ªÅ echostr n·∫øu c√≥ logic x√°c th·ª±c cho GET webhook
//   // const { hub: { challenge } } = req.query;
//   // return res.status(200).send(challenge || "IG Webhook verified");

//   // Parse the query params
//   let mode = req.query["hub.mode"];
//   let token = req.query["hub.verify_token"];
//   let challenge = req.query["hub.challenge"];

//   // Check if a token and mode is in the query string of the request
//   if (mode && token) {
//     // Check the mode and token sent is correct
//     if (mode === "subscribe" && token === "1234567890") {
//       // Respond with the challenge token from the request
//       console.log("WEBHOOK_VERIFIED");
//       res.status(200).send(challenge);
//     } else {
//       // Respond with '403 Forbidden' if verify tokens do not match
//       res.status(403).send("Forbidden ‚Äì Token mismatch");
//     }
//   }

// }

export async function verifyWebhookAnnaFB(req, res) {
  // // ƒê∆°n gi·∫£n tr·∫£ v·ªÅ echostr n·∫øu c√≥ logic x√°c th·ª±c cho GET webhook
  // const { hub: { challenge } } = req.query;
  // return res.status(200).send(challenge || "FB Webhook verified");

  // Parse the query params
  let mode = req.query["hub.mode"];
  let token = req.query["hub.verify_token"];
  let challenge = req.query["hub.challenge"];

  // Check if a token and mode is in the query string of the request
  if (mode && token) {
    // Check the mode and token sent is correct
    if (mode === "subscribe" && token === "1234567890") {
      // Respond with the challenge token from the request
      console.log("WEBHOOK_VERIFIED");
      res.status(200).send(challenge);
    } else {
      // Respond with '403 Forbidden' if verify tokens do not match
      res.status(403).send("Forbidden ‚Äì Token mismatch");
    }
  }
}

// export async function verifyWebhookMessager(req, res) {
  
//   // Parse the query params
//   let mode = req.query["hub.mode"];
//   let token = req.query["hub.verify_token"];
//   let challenge = req.query["hub.challenge"];

//   // Check if a token and mode is in the query string of the request
//   if (mode && token) {
//     // Check the mode and token sent is correct
//     if (mode === "subscribe" && token === "1234567890") {
//       // Respond with the challenge token from the request
//       console.log("WEBHOOK_VERIFIED");
//       res.status(200).send(challenge);
//     } else {
//       // Respond with '403 Forbidden' if verify tokens do not match
//       res.status(403).send("Forbidden ‚Äì Token mismatch");
//     }
//   }
// }

// export async function handleFacebookWebhook(req, res, next) {
//   try {
//     const body = req.body;

//     if (body.object !== "page") {
//       return res.sendStatus(404);
//     }

//     const token = process.env.PAGE_ACCESS_TOKEN; // Facebook Page Token (ho·∫∑c d√πng process.env.PAGE_ACCESS_TOKEN)
//     const config = await fetchConfigFromAirtable();
    
//     // Ki·ªÉm tra tr·∫°ng th√°i bot
//     if (config.bot_status !== "active") {
//       console.log("üö´ Bot ƒëang t·∫Øt, kh√¥ng x·ª≠ l√Ω ph·∫£n h·ªìi.");
//       return res.sendStatus(200);
//     }

//     const SYSTEM_PROMPT = config.SYSTEM_PROMPT;
//     const platform = "facebook";

//     for (const entry of body.entry) {
//       const webhook_event = entry.messaging?.[0];
//       const changes = entry.changes || [];


      
//       // ‚úÖ X·ª≠ l√Ω tin nh·∫Øn Messenger nh∆∞ tr∆∞·ªõc
//       if (webhook_event) {
//         const sender_psid = webhook_event?.sender?.id;
//         // const recipient_id = webhook_event?.recipient?.id;
//         const message = webhook_event?.message;

//         // ‚ùå B·ªè qua n·∫øu kh√¥ng c√≥ sender ho·∫∑c sender l√† ch√≠nh page bot
//         if (!sender_psid || sender_psid === "543096242213723") {
//           console.log("‚è≠Ô∏è B·ªè qua event t·ª´ ch√≠nh page bot ho·∫∑c thi·∫øu sender.");
//           continue;
//         }

//         // if (!sender_psid) continue;

//         // ‚úÖ Ch·ªâ x·ª≠ l√Ω n·∫øu l√† tin nh·∫Øn d·∫°ng text
//         if (message?.text) {
//           const userMessage = message.text;
//           console.log(`üì• Messenger > User g·ª≠i: "${userMessage}"`);

//           // L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
//           await saveMessage({
//             userId: sender_psid,
//             role: "user",
//             message: userMessage,
//             platform
//           });

//           // ‚úÖ L∆∞u l·∫ßn t∆∞∆°ng t√°c g·∫ßn nh·∫•t
//           await updateLastInteractionOnlyIfNewDay(sender_psid, "message_received", platform);

//           // L·∫•y l·ªãch s·ª≠
//           const history = await getRecentMessages(sender_psid, platform);

//           // G·ªçi AI v√† g·ª≠i ph·∫£n h·ªìi
//           const aiReply = await handleAIReply(
//             sender_psid,
//             userMessage,
//             SYSTEM_PROMPT,
//             history,
//             token,
//             platform
//           );

//           // L∆∞u ph·∫£n h·ªìi AI
//           await saveMessage({
//             userId: sender_psid,
//             role: "assistant",
//             message: aiReply,
//             platform
//           });
//         } else {
//           // üõë B·ªè qua c√°c lo·∫°i tin nh·∫Øn kh√¥ng ph·∫£i text
//           console.log("üìé B·ªè qua message kh√¥ng ph·∫£i text:", message);
//           // await replyMessenger(
//           //   sender_psid,
//           //   "‚ùó Hi·ªán t·∫°i Hair Consulting ch·ªâ h·ªó tr·ª£ tin nh·∫Øn vƒÉn b·∫£n.",
//           //   token
//           // );
//         }
//       }

//       // ‚úÖ X·ª≠ l√Ω comment t·ª´ b√†i vi·∫øt (feed webhook)
//       for (const change of changes) {
//         const value = change.value;

//         if (change.field === "feed" && value.item === "comment" && value.verb === "add") {
//           const commentId = value.comment_id;
//           const postId = value.post_id;
//           const parentId = value.parent_id;

//           const senderId = value.from?.id;
//           // const senderName = value.from?.name;
//           const message = value.message;

          
//           // ‚ùå N·∫øu l√† comment tr·∫£ l·ªùi (reply) ‚Üí b·ªè qua
//           if (parentId !== postId) {
//             console.log("‚è≠Ô∏è B·ªè qua comment reply (comment c·∫•p 2):", commentId);
//             continue;
//           }

//           if (!senderId) {
//             console.warn("‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c senderId t·ª´ comment:", value);
//             continue;
//           }
          
//           // üö´ N·∫øu senderId l√† ID c·ªßa ch√≠nh page ‚Üí b·ªè qua
//           const PAGE_ID = entry.id; // t·ª´ entry.id ch√≠nh l√† ID page
//           if (senderId === PAGE_ID) {
//             console.log("‚è≠Ô∏è B·ªè qua comment do ch√≠nh Page ƒëƒÉng.");
//             continue;
//           }

//           // ‚úÖ C√≤n l·∫°i l√† comment t·ª´ ng∆∞·ªùi d√πng
//           // console.log("üí¨ Comment ng∆∞·ªùi d√πng:", message, PAGE_ID, senderId, value);

//           console.log("üí¨ Comment m·ªõi:", {
//             senderId,
//             commentId,
//             postId,
//             message
//           });

//           await saveMessage({
//             userId: senderId,
//             role: "user",
//             message,
//             platform
//           });

//           await updateLastInteractionOnlyIfNewDay(senderId, "comment_received", platform);

//           // L·∫•y l·ªãch s·ª≠
//           const history = await getRecentMessages(senderId, platform);

//           // üëâ N·∫øu b·∫°n mu·ªën ph·∫£n h·ªìi comment b·∫±ng AI ho·∫∑c g·ª≠i comment l·∫°i:
//           const aiCommentReply = await handleAIReply(senderId, message, SYSTEM_PROMPT, history, token, platform);

//           // L∆∞u ph·∫£n h·ªìi AI
//           await saveMessage({
//             userId: senderId,
//             role: "assistant",
//             message: aiCommentReply,
//             platform
//           });

//           await replyToComment(commentId, aiCommentReply, token); // c·∫ßn vi·∫øt th√™m h√†m n√†y n·∫øu c·∫ßn
//         }
//       }

//     }
//     res.status(200).send("EVENT_RECEIVED");
//   } catch (err) {
//     console.error("üî• L·ªói webhook Messenger:", err);
//     next(err);
//   }
// }
